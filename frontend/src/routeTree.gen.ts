/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutItemsImport } from './routes/_layout/items'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutIlluminationIndexImport } from './routes/_layout/illumination/index'
import { Route as LayoutIlluminationKidsIndexImport } from './routes/_layout/illumination/kids/index'
import { Route as LayoutIlluminationInterviewIndexImport } from './routes/_layout/illumination/interview/index'
import { Route as LayoutIlluminationInterviewTaskTaskIdImport } from './routes/_layout/illumination/interview/task/$taskId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  id: '/recover-password',
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutItemsRoute = LayoutItemsImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutIlluminationIndexRoute = LayoutIlluminationIndexImport.update({
  id: '/illumination/',
  path: '/illumination/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutIlluminationKidsIndexRoute =
  LayoutIlluminationKidsIndexImport.update({
    id: '/illumination/kids/',
    path: '/illumination/kids/',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutIlluminationInterviewIndexRoute =
  LayoutIlluminationInterviewIndexImport.update({
    id: '/illumination/interview/',
    path: '/illumination/interview/',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutIlluminationInterviewTaskTaskIdRoute =
  LayoutIlluminationInterviewTaskTaskIdImport.update({
    id: '/illumination/interview/task/$taskId',
    path: '/illumination/interview/task/$taskId',
    getParentRoute: () => LayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      id: '/recover-password'
      path: '/recover-password'
      fullPath: '/recover-password'
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      id: '/_layout/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/items': {
      id: '/_layout/items'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof LayoutItemsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/illumination/': {
      id: '/_layout/illumination/'
      path: '/illumination'
      fullPath: '/illumination'
      preLoaderRoute: typeof LayoutIlluminationIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/illumination/interview/': {
      id: '/_layout/illumination/interview/'
      path: '/illumination/interview'
      fullPath: '/illumination/interview'
      preLoaderRoute: typeof LayoutIlluminationInterviewIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/illumination/kids/': {
      id: '/_layout/illumination/kids/'
      path: '/illumination/kids'
      fullPath: '/illumination/kids'
      preLoaderRoute: typeof LayoutIlluminationKidsIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/illumination/interview/task/$taskId': {
      id: '/_layout/illumination/interview/task/$taskId'
      path: '/illumination/interview/task/$taskId'
      fullPath: '/illumination/interview/task/$taskId'
      preLoaderRoute: typeof LayoutIlluminationInterviewTaskTaskIdImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAdminRoute: typeof LayoutAdminRoute
  LayoutItemsRoute: typeof LayoutItemsRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutIlluminationIndexRoute: typeof LayoutIlluminationIndexRoute
  LayoutIlluminationInterviewIndexRoute: typeof LayoutIlluminationInterviewIndexRoute
  LayoutIlluminationKidsIndexRoute: typeof LayoutIlluminationKidsIndexRoute
  LayoutIlluminationInterviewTaskTaskIdRoute: typeof LayoutIlluminationInterviewTaskTaskIdRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAdminRoute: LayoutAdminRoute,
  LayoutItemsRoute: LayoutItemsRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutIlluminationIndexRoute: LayoutIlluminationIndexRoute,
  LayoutIlluminationInterviewIndexRoute: LayoutIlluminationInterviewIndexRoute,
  LayoutIlluminationKidsIndexRoute: LayoutIlluminationKidsIndexRoute,
  LayoutIlluminationInterviewTaskTaskIdRoute:
    LayoutIlluminationInterviewTaskTaskIdRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/admin': typeof LayoutAdminRoute
  '/items': typeof LayoutItemsRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
  '/illumination': typeof LayoutIlluminationIndexRoute
  '/illumination/interview': typeof LayoutIlluminationInterviewIndexRoute
  '/illumination/kids': typeof LayoutIlluminationKidsIndexRoute
  '/illumination/interview/task/$taskId': typeof LayoutIlluminationInterviewTaskTaskIdRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/admin': typeof LayoutAdminRoute
  '/items': typeof LayoutItemsRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
  '/illumination': typeof LayoutIlluminationIndexRoute
  '/illumination/interview': typeof LayoutIlluminationInterviewIndexRoute
  '/illumination/kids': typeof LayoutIlluminationKidsIndexRoute
  '/illumination/interview/task/$taskId': typeof LayoutIlluminationInterviewTaskTaskIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/_layout/admin': typeof LayoutAdminRoute
  '/_layout/items': typeof LayoutItemsRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/illumination/': typeof LayoutIlluminationIndexRoute
  '/_layout/illumination/interview/': typeof LayoutIlluminationInterviewIndexRoute
  '/_layout/illumination/kids/': typeof LayoutIlluminationKidsIndexRoute
  '/_layout/illumination/interview/task/$taskId': typeof LayoutIlluminationInterviewTaskTaskIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/admin'
    | '/items'
    | '/settings'
    | '/'
    | '/illumination'
    | '/illumination/interview'
    | '/illumination/kids'
    | '/illumination/interview/task/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/admin'
    | '/items'
    | '/settings'
    | '/'
    | '/illumination'
    | '/illumination/interview'
    | '/illumination/kids'
    | '/illumination/interview/task/$taskId'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/_layout/admin'
    | '/_layout/items'
    | '/_layout/settings'
    | '/_layout/'
    | '/_layout/illumination/'
    | '/_layout/illumination/interview/'
    | '/_layout/illumination/kids/'
    | '/_layout/illumination/interview/task/$taskId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  RecoverPasswordRoute: typeof RecoverPasswordRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  RecoverPasswordRoute: RecoverPasswordRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login",
        "/recover-password",
        "/reset-password",
        "/signup"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/admin",
        "/_layout/items",
        "/_layout/settings",
        "/_layout/",
        "/_layout/illumination/",
        "/_layout/illumination/interview/",
        "/_layout/illumination/kids/",
        "/_layout/illumination/interview/task/$taskId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/recover-password": {
      "filePath": "recover-password.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_layout/admin": {
      "filePath": "_layout/admin.tsx",
      "parent": "/_layout"
    },
    "/_layout/items": {
      "filePath": "_layout/items.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/illumination/": {
      "filePath": "_layout/illumination/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/illumination/interview/": {
      "filePath": "_layout/illumination/interview/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/illumination/kids/": {
      "filePath": "_layout/illumination/kids/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/illumination/interview/task/$taskId": {
      "filePath": "_layout/illumination/interview/task/$taskId.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
